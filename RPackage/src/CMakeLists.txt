cmake_minimum_required(VERSION 3.1)

if(${CMAKE_CXX_COMPILER_ID} STREQUAL MSVC)
	execute_process(COMMAND ${R_COMMAND} --no-restore --no-save -e "q()" OUTPUT_VARIABLE R_OUTPUT)
	string(FIND "${R_OUTPUT}" "64-bit" R_OUTPUT_64_BIT_INDEX)
	string(FIND "${R_OUTPUT}" "32-bit" R_OUTPUT_32_BIT_INDEX)

	#If we're building for 64-bit
	if(CMAKE_SIZEOF_VOID_P EQUAL 8)
		message(STATUS "Checking that 64-bit R was selected")
		if(NOT ${R_OUTPUT_32_BIT_INDEX} EQUAL -1)
			message(FATAL_ERROR "Checking that 64-bit R was selected - 32-bit R found")
		elseif(${R_OUTPUT_64_BIT_INDEX} EQUAL -1)
		 	message(STATUS ${R_OUTPUT})
			message(FATAL_ERROR "Checking that 64-bit R was selected - Unable to identify as either 64 or 32 bit")
		endif()
		message(STATUS "Checking that 64-bit R was selected - passed")

		message(STATUS "Checking that 64-bit compiler was selected")
		execute_process(COMMAND ${CMAKE_CXX_COMPILER} ERROR_VARIABLE COMPILER_OUTPUT_STRING OUTPUT_QUIET)
		string(FIND "${COMPILER_OUTPUT_STRING}" x86 COMPILER_OUTPUT_STRING_X86_INDEX)
		if(NOT ${COMPILER_OUTPUT_STRING_X86_INDEX} EQUAL -1)
			message(FATAL_ERROR "Checking that 64-bit compiler was selected - FAILED\nPlease ensure that you select the x64 developer tools prompt")
		endif()
		string(FIND "${COMPILER_OUTPUT_STRING}" "x64" COMPILER_OUTPUT_STRING_X64_INDEX)
		if(${COMPILER_OUTPUT_STRING_X64_INDEX} EQUAL -1)
			message(FATAL_ERROR "Checking that 64-bit compiler was selected - FAILED\nPlease ensure that you select the x64 developer tools prompt")
		endif()
		message(STATUS "Checking that 64-bit compiler was selected - passed")
		#if we're building for 32-bit
	else()
		message(STATUS "Checking that 32-bit R was selected")
		if(NOT ${R_OUTPUT_64_BIT_INDEX} EQUAL -1)
			message(FATAL_ERROR "Checking that 32-bit R was selected - 64-bit R found")
		elseif(${R_OUTPUT_32_BIT_INDEX} EQUAL -1)
		 	message(STATUS ${R_OUTPUT})
			message(FATAL_ERROR "Checking that 32-bit R was selected - Unable to identify as either 64 or 32 bit")
		endif()
		message(STATUS "Checking that 32-bit R was selected - passed")

		message(STATUS "Checking that 32bit compiler was selected")
		execute_process(COMMAND ${CMAKE_CXX_COMPILER} ERROR_VARIABLE COMPILER_OUTPUT_STRING OUTPUT_QUIET)
		string(FIND "${COMPILER_OUTPUT_STRING}" x86 COMPILER_OUTPUT_STRING_X86_INDEX)
		string(FIND "${COMPILER_OUTPUT_STRING}" "x64" COMPILER_OUTPUT_STRING_X64_INDEX)
		if(NOT ${COMPILER_OUTPUT_STRING_X64_INDEX} EQUAL -1)
			message(FATAL_ERROR "Checking that 32-bit compiler was selected - FAILED\nPlease ensure that you select the 32-bit developer tools prompt")
		endif()
		if(${COMPILER_OUTPUT_STRING_X86_INDEX} EQUAL -1)
			message(FATAL_ERROR "Checking that 32-bit compiler was selected - FAILED\nPlease ensure that you select the 32-bit developer tools prompt")
		endif()
		
	endif()

	#If we're using MSVC, work out where lib.exe is
	get_filename_component(COMPILER_PATH "${CMAKE_CXX_COMPILER}" DIRECTORY CACHE)
	message(STATUS "Searching for lib.exe")
	find_program(LIB_EXECUTABLE lib PATHS ${COMPILER_PATH})
	if(${LIB_EXECUTABLE} STREQUAL LIB_EXECUTABLE-NOTFOUND)
		message(FATAL_ERROR "Searching for lib.exe - not found")
	else()
		message(STATUS "Searching for lib.exe - found")
	endif()

	#If we're using MSVC, work out where dumpbin.exe is
	message(STATUS "Searching for dumpbin.exe")
	find_program(DUMPBIN_EXECUTABLE dumpbin PATHS ${COMPILER_PATH})
	if(${DUMPBIN_EXECUTABLE} STREQUAL DUMPBIN_EXECUTABLE-NOTFOUND)
		message(FATAL_ERROR "Searching for dumpbin.exe - not found")
	else()
		message(STATUS "Searching for dumpbin.exe - found")
	endif()

	message(STATUS "Generating import library for R.dll")
	file(WRITE "${CMAKE_BINARY_DIR}/RPackage/R.def" "LIBRARY R\n")
	file(APPEND "${CMAKE_BINARY_DIR}/RPackage/R.def" "EXPORTS\n")
	#64-bit case
	if(CMAKE_SIZEOF_VOID_P EQUAL 8)
		execute_process(COMMAND "${DUMPBIN_EXECUTABLE}" /exports "${R_HOME}/bin/x64/R.dll" ERROR_QUIET OUTPUT_VARIABLE DUMPBIN_OUTPUT)
		#Strip off the junk at the start and end
		string(REGEX MATCHALL "[ |\t]+[0-9]+[ |\t]+[0-9A-F]+[ |\t]+0[0-9A-F]+[ |\t]+[^\n|\r]+\n" R_EXPORTS_LIST_UNFILTERED "${DUMPBIN_OUTPUT}")
		foreach(symbolline IN LISTS R_EXPORTS_LIST_UNFILTERED)
			string(REGEX REPLACE "[ |\t]+[0-9]+[ |\t]+[0-9A-F]+[ |\t]+0[0-9A-F]+[ |\t]+([^\n|\r]+)\n" "\t\\1" symbol "${symbolline}")
			file(APPEND "${CMAKE_BINARY_DIR}/RPackage/R.def" "${symbol}\n")
		endforeach(symbolline)
		execute_process(COMMAND "${LIB_EXECUTABLE}" /MACHINE:X64 /nodefaultlib "/def:${CMAKE_BINARY_DIR}/RPackage/R.def" "/out:${CMAKE_BINARY_DIR}/RPackage/R.lib" ERROR_QUIET OUTPUT_QUIET)
	else()
		#32-bit case
		execute_process(COMMAND "${DUMPBIN_EXECUTABLE}" /exports "${R_HOME}/bin/i386/R.dll" ERROR_QUIET OUTPUT_VARIABLE DUMPBIN_OUTPUT)
		#Strip off the junk at the start and end
		string(REGEX MATCHALL "[ |\t]+[0-9]+[ |\t]+[0-9A-F]+[ |\t]+0[0-9A-F]+[ |\t]+[^\n|\r]+\n" R_EXPORTS_LIST_UNFILTERED "${DUMPBIN_OUTPUT}")
		foreach(symbolline IN LISTS R_EXPORTS_LIST_UNFILTERED)
			string(REGEX REPLACE "[ |\t]+[0-9]+[ |\t]+[0-9A-F]+[ |\t]+0[0-9A-F]+[ |\t]+([^\n|\r]+)\n" "\t\\1" symbol "${symbolline}")
			file(APPEND "${CMAKE_BINARY_DIR}/RPackage/R.def" "${symbol}\n")
		endforeach(symbolline)
		execute_process(COMMAND "${LIB_EXECUTABLE}" /nodefaultlib "/def:${CMAKE_BINARY_DIR}/RPackage/R.def" "/out:${CMAKE_BINARY_DIR}/RPackage/R.lib" ERROR_QUIET OUTPUT_QUIET)
	endif()
	file(REMOVE "${CMAKE_BINARY_DIR}/RPackage/R.def")
	if(NOT EXISTS "${CMAKE_BINARY_DIR}/Rpackage/R.lib")
		message(FATAL_ERROR "Generating import library for R.dll - Error R.lib not found")
	endif()
	message(STATUS "Generating import library for R.dll - done")

	if(CMAKE_CXX_COMPILER_VERSION VERSION_LESS "19.0")
		add_definitions(-Dsnprintf=_snprintf)
	endif()
endif()

#Ok, configuration is mostly done. Now actually building the shared library
add_subdirectory(wellLogData)
